# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supplemental_data_id': 'str',
        'logging': 'LoggingType',
        'tracking_server': 'str',
        'tracking_server_secure': 'str'
    }

    attribute_map = {
        'supplemental_data_id': 'supplementalDataId',
        'logging': 'logging',
        'tracking_server': 'trackingServer',
        'tracking_server_secure': 'trackingServerSecure'
    }

    def __init__(self, supplemental_data_id=None, logging=None, tracking_server=None, tracking_server_secure=None):
        """AnalyticsRequest - a model defined in OpenAPI"""

        self._supplemental_data_id = None
        self._logging = None
        self._tracking_server = None
        self._tracking_server_secure = None
        self.discriminator = None

        if supplemental_data_id is not None:
            self.supplemental_data_id = supplemental_data_id
        if logging is not None:
            self.logging = logging
        if tracking_server is not None:
            self.tracking_server = tracking_server
        if tracking_server_secure is not None:
            self.tracking_server_secure = tracking_server_secure

    @property
    def supplemental_data_id(self):
        """Gets the supplemental_data_id of this AnalyticsRequest.

        Supplemental data id, used for **server side** integrations. Format <16 hexadecimal digits>-<16 hexadecimal digits> 

        :return: The supplemental_data_id of this AnalyticsRequest.
        :rtype: str
        """
        return self._supplemental_data_id

    @supplemental_data_id.setter
    def supplemental_data_id(self, supplemental_data_id):
        """Sets the supplemental_data_id of this AnalyticsRequest.

        Supplemental data id, used for **server side** integrations. Format <16 hexadecimal digits>-<16 hexadecimal digits> 

        :param supplemental_data_id: The supplemental_data_id of this AnalyticsRequest.
        :type: str
        """
        if supplemental_data_id is not None and len(supplemental_data_id) > 33:
            raise ValueError("Invalid value for `supplemental_data_id`, length must be less than or equal to `33`")
        if supplemental_data_id is not None and len(supplemental_data_id) < 33:
            raise ValueError("Invalid value for `supplemental_data_id`, length must be greater than or equal to `33`")

        self._supplemental_data_id = supplemental_data_id

    @property
    def logging(self):
        """Gets the logging of this AnalyticsRequest.


        :return: The logging of this AnalyticsRequest.
        :rtype: LoggingType
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this AnalyticsRequest.


        :param logging: The logging of this AnalyticsRequest.
        :type: LoggingType
        """

        self._logging = logging

    @property
    def tracking_server(self):
        """Gets the tracking_server of this AnalyticsRequest.

        tracking server

        :return: The tracking_server of this AnalyticsRequest.
        :rtype: str
        """
        return self._tracking_server

    @tracking_server.setter
    def tracking_server(self, tracking_server):
        """Sets the tracking_server of this AnalyticsRequest.

        tracking server

        :param tracking_server: The tracking_server of this AnalyticsRequest.
        :type: str
        """

        self._tracking_server = tracking_server

    @property
    def tracking_server_secure(self):
        """Gets the tracking_server_secure of this AnalyticsRequest.

        secure tracking server

        :return: The tracking_server_secure of this AnalyticsRequest.
        :rtype: str
        """
        return self._tracking_server_secure

    @tracking_server_secure.setter
    def tracking_server_secure(self, tracking_server_secure):
        """Sets the tracking_server_secure of this AnalyticsRequest.

        secure tracking server

        :param tracking_server_secure: The tracking_server_secure of this AnalyticsRequest.
        :type: str
        """

        self._tracking_server_secure = tracking_server_secure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
