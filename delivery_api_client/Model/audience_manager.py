# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AudienceManager(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_hint': 'int',
        'blob': 'str'
    }

    attribute_map = {
        'location_hint': 'locationHint',
        'blob': 'blob'
    }

    def __init__(self, location_hint=None, blob=None):
        """AudienceManager - a model defined in OpenAPI"""

        self._location_hint = None
        self._blob = None
        self.discriminator = None

        if location_hint is not None:
            self.location_hint = location_hint
        if blob is not None:
            self.blob = blob

    @property
    def location_hint(self):
        """Gets the location_hint of this AudienceManager.

        DCS location hint. Used to determine which AAM DCS Endpoint to hit in order to retrieve the profile. 

        :return: The location_hint of this AudienceManager.
        :rtype: int
        """
        return self._location_hint

    @location_hint.setter
    def location_hint(self, location_hint):
        """Sets the location_hint of this AudienceManager.

        DCS location hint. Used to determine which AAM DCS Endpoint to hit in order to retrieve the profile. 

        :param location_hint: The location_hint of this AudienceManager.
        :type: int
        """
        if location_hint is not None and location_hint < 1:
            raise ValueError("Invalid value for `location_hint`, must be a value greater than or equal to `1`")

        self._location_hint = location_hint

    @property
    def blob(self):
        """Gets the blob of this AudienceManager.

        AAM Blob. Used to send additional data to AAM. Validation   * Cannot be blank. 

        :return: The blob of this AudienceManager.
        :rtype: str
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this AudienceManager.

        AAM Blob. Used to send additional data to AAM. Validation   * Cannot be blank. 

        :param blob: The blob of this AudienceManager.
        :type: str
        """
        if blob is not None and len(blob) > 1024:
            raise ValueError("Invalid value for `blob`, length must be less than or equal to `1024`")
        if blob is not None and len(blob) < 1:
            raise ValueError("Invalid value for `blob`, length must be greater than or equal to `1`")

        self._blob = blob

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
