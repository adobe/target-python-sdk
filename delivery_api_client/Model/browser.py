# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Browser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'language': 'str',
        'web_gl_renderer': 'str'
    }

    attribute_map = {
        'host': 'host',
        'language': 'language',
        'web_gl_renderer': 'webGLRenderer'
    }

    def __init__(self, host=None, language=None, web_gl_renderer=None):
        """Browser - a model defined in OpenAPI"""

        self._host = None
        self._language = None
        self._web_gl_renderer = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if language is not None:
            self.language = language
        if web_gl_renderer is not None:
            self.web_gl_renderer = web_gl_renderer

    @property
    def host(self):
        """Gets the host of this Browser.

        Current web page host

        :return: The host of this Browser.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Browser.

        Current web page host

        :param host: The host of this Browser.
        :type: str
        """

        self._host = host

    @property
    def language(self):
        """Gets the language of this Browser.

        Language in Accept-Language header format, see RFC 7231 sec. 5.3.5

        :return: The language of this Browser.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Browser.

        Language in Accept-Language header format, see RFC 7231 sec. 5.3.5

        :param language: The language of this Browser.
        :type: str
        """

        self._language = language

    @property
    def web_gl_renderer(self):
        """Gets the web_gl_renderer of this Browser.

        This is an optional field, added to help with device detection using device atlas 

        :return: The web_gl_renderer of this Browser.
        :rtype: str
        """
        return self._web_gl_renderer

    @web_gl_renderer.setter
    def web_gl_renderer(self, web_gl_renderer):
        """Sets the web_gl_renderer of this Browser.

        This is an optional field, added to help with device detection using device atlas 

        :param web_gl_renderer: The web_gl_renderer of this Browser.
        :type: str
        """

        self._web_gl_renderer = web_gl_renderer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Browser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
