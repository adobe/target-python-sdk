# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CustomerId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'integration_code': 'str',
        'authenticated_state': 'AuthenticatedState'
    }

    attribute_map = {
        'id': 'id',
        'integration_code': 'integrationCode',
        'authenticated_state': 'authenticatedState'
    }

    def __init__(self, id=None, integration_code=None, authenticated_state=None):
        """CustomerId - a model defined in OpenAPI"""

        self._id = None
        self._integration_code = None
        self._authenticated_state = None
        self.discriminator = None

        self.id = id
        self.integration_code = integration_code
        self.authenticated_state = authenticated_state

    @property
    def id(self):
        """Gets the id of this CustomerId.


        :return: The id of this CustomerId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerId.


        :param id: The id of this CustomerId.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 128:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `128`")

        self._id = id

    @property
    def integration_code(self):
        """Gets the integration_code of this CustomerId.

        This is the **alias** used when setting up a CRS datasource in the Marketing Cloud UI.

        :return: The integration_code of this CustomerId.
        :rtype: str
        """
        return self._integration_code

    @integration_code.setter
    def integration_code(self, integration_code):
        """Sets the integration_code of this CustomerId.

        This is the **alias** used when setting up a CRS datasource in the Marketing Cloud UI.

        :param integration_code: The integration_code of this CustomerId.
        :type: str
        """
        if integration_code is None:
            raise ValueError("Invalid value for `integration_code`, must not be `None`")
        if integration_code is not None and len(integration_code) > 50:
            raise ValueError("Invalid value for `integration_code`, length must be less than or equal to `50`")

        self._integration_code = integration_code

    @property
    def authenticated_state(self):
        """Gets the authenticated_state of this CustomerId.


        :return: The authenticated_state of this CustomerId.
        :rtype: AuthenticatedState
        """
        return self._authenticated_state

    @authenticated_state.setter
    def authenticated_state(self, authenticated_state):
        """Sets the authenticated_state of this CustomerId.


        :param authenticated_state: The authenticated_state of this CustomerId.
        :type: AuthenticatedState
        """
        if authenticated_state is None:
            raise ValueError("Invalid value for `authenticated_state`, must not be `None`")

        self._authenticated_state = authenticated_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
