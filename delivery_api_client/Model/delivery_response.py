# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeliveryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'int',
        'request_id': 'str',
        'id': 'VisitorId',
        'client': 'str',
        'edge_host': 'str',
        'execute': 'ExecuteResponse',
        'prefetch': 'PrefetchResponse',
        'notifications': 'list[NotificationResponse]'
    }

    attribute_map = {
        'status': 'status',
        'request_id': 'requestId',
        'id': 'id',
        'client': 'client',
        'edge_host': 'edgeHost',
        'execute': 'execute',
        'prefetch': 'prefetch',
        'notifications': 'notifications'
    }

    def __init__(self, status=None, request_id=None, id=None, client=None, edge_host=None, execute=None, prefetch=None, notifications=None):
        """DeliveryResponse - a model defined in OpenAPI"""

        self._status = None
        self._request_id = None
        self._id = None
        self._client = None
        self._edge_host = None
        self._execute = None
        self._prefetch = None
        self._notifications = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if request_id is not None:
            self.request_id = request_id
        if id is not None:
            self.id = id
        if client is not None:
            self.client = client
        if edge_host is not None:
            self.edge_host = edge_host
        if execute is not None:
            self.execute = execute
        if prefetch is not None:
            self.prefetch = prefetch
        if notifications is not None:
            self.notifications = notifications

    @property
    def status(self):
        """Gets the status of this DeliveryResponse.


        :return: The status of this DeliveryResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeliveryResponse.


        :param status: The status of this DeliveryResponse.
        :type: int
        """

        self._status = status

    @property
    def request_id(self):
        """Gets the request_id of this DeliveryResponse.

        ID of the processed request. If it's not sent in the request, a random ID (UUID) is generated and returned with the response. 

        :return: The request_id of this DeliveryResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DeliveryResponse.

        ID of the processed request. If it's not sent in the request, a random ID (UUID) is generated and returned with the response. 

        :param request_id: The request_id of this DeliveryResponse.
        :type: str
        """

        self._request_id = request_id

    @property
    def id(self):
        """Gets the id of this DeliveryResponse.


        :return: The id of this DeliveryResponse.
        :rtype: VisitorId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeliveryResponse.


        :param id: The id of this DeliveryResponse.
        :type: VisitorId
        """

        self._id = id

    @property
    def client(self):
        """Gets the client of this DeliveryResponse.

        Client's code. The one which was sent in the request's path.

        :return: The client of this DeliveryResponse.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this DeliveryResponse.

        Client's code. The one which was sent in the request's path.

        :param client: The client of this DeliveryResponse.
        :type: str
        """

        self._client = client

    @property
    def edge_host(self):
        """Gets the edge_host of this DeliveryResponse.

        Cluster host name that served the response. Ideally, all subsequent requests should be made to that host.

        :return: The edge_host of this DeliveryResponse.
        :rtype: str
        """
        return self._edge_host

    @edge_host.setter
    def edge_host(self, edge_host):
        """Sets the edge_host of this DeliveryResponse.

        Cluster host name that served the response. Ideally, all subsequent requests should be made to that host.

        :param edge_host: The edge_host of this DeliveryResponse.
        :type: str
        """

        self._edge_host = edge_host

    @property
    def execute(self):
        """Gets the execute of this DeliveryResponse.


        :return: The execute of this DeliveryResponse.
        :rtype: ExecuteResponse
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this DeliveryResponse.


        :param execute: The execute of this DeliveryResponse.
        :type: ExecuteResponse
        """

        self._execute = execute

    @property
    def prefetch(self):
        """Gets the prefetch of this DeliveryResponse.


        :return: The prefetch of this DeliveryResponse.
        :rtype: PrefetchResponse
        """
        return self._prefetch

    @prefetch.setter
    def prefetch(self, prefetch):
        """Sets the prefetch of this DeliveryResponse.


        :param prefetch: The prefetch of this DeliveryResponse.
        :type: PrefetchResponse
        """

        self._prefetch = prefetch

    @property
    def notifications(self):
        """Gets the notifications of this DeliveryResponse.


        :return: The notifications of this DeliveryResponse.
        :rtype: list[NotificationResponse]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this DeliveryResponse.


        :param notifications: The notifications of this DeliveryResponse.
        :type: list[NotificationResponse]
        """

        self._notifications = notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
