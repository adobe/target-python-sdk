# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MboxResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'int',
        'name': 'str',
        'options': 'list[Option]',
        'metrics': 'list[Metric]',
        'analytics': 'AnalyticsResponse',
        'trace': 'dict(str, object)'
    }

    attribute_map = {
        'index': 'index',
        'name': 'name',
        'options': 'options',
        'metrics': 'metrics',
        'analytics': 'analytics',
        'trace': 'trace'
    }

    def __init__(self, index=None, name=None, options=None, metrics=None, analytics=None, trace=None):
        """MboxResponse - a model defined in OpenAPI"""

        self._index = None
        self._name = None
        self._options = None
        self._metrics = None
        self._analytics = None
        self._trace = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if metrics is not None:
            self.metrics = metrics
        if analytics is not None:
            self.analytics = analytics
        if trace is not None:
            self.trace = trace

    @property
    def index(self):
        """Gets the index of this MboxResponse.

        Indicates that the response is for mbox with the same index, as was specified in the prefetch or execute request. 

        :return: The index of this MboxResponse.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this MboxResponse.

        Indicates that the response is for mbox with the same index, as was specified in the prefetch or execute request. 

        :param index: The index of this MboxResponse.
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this MboxResponse.

        The name of the mbox. Since the same mbox name can be specified multiple times in the request it should be used in conjunction with the index. 

        :return: The name of this MboxResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MboxResponse.

        The name of the mbox. Since the same mbox name can be specified multiple times in the request it should be used in conjunction with the index. 

        :param name: The name of this MboxResponse.
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this MboxResponse.

        The option that was matched for the current mbox. Cannot be an offer with templates or a visual offer. 

        :return: The options of this MboxResponse.
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MboxResponse.

        The option that was matched for the current mbox. Cannot be an offer with templates or a visual offer. 

        :param options: The options of this MboxResponse.
        :type: list[Option]
        """

        self._options = options

    @property
    def metrics(self):
        """Gets the metrics of this MboxResponse.

        Click metrics.

        :return: The metrics of this MboxResponse.
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this MboxResponse.

        Click metrics.

        :param metrics: The metrics of this MboxResponse.
        :type: list[Metric]
        """

        self._metrics = metrics

    @property
    def analytics(self):
        """Gets the analytics of this MboxResponse.


        :return: The analytics of this MboxResponse.
        :rtype: AnalyticsResponse
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this MboxResponse.


        :param analytics: The analytics of this MboxResponse.
        :type: AnalyticsResponse
        """

        self._analytics = analytics

    @property
    def trace(self):
        """Gets the trace of this MboxResponse.

        The object containing all trace data for the request, only present if the trace token was provided in the request. 

        :return: The trace of this MboxResponse.
        :rtype: dict(str, object)
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this MboxResponse.

        The object containing all trace data for the request, only present if the trace token was provided in the request. 

        :param trace: The trace of this MboxResponse.
        :type: dict(str, object)
        """

        self._trace = trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MboxResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
