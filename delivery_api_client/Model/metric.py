# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Metric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'MetricType',
        'selector': 'str',
        'event_token': 'str',
        'analytics': 'AnalyticsResponse'
    }

    attribute_map = {
        'type': 'type',
        'selector': 'selector',
        'event_token': 'eventToken',
        'analytics': 'analytics'
    }

    def __init__(self, type=None, selector=None, event_token=None, analytics=None):
        """Metric - a model defined in OpenAPI"""

        self._type = None
        self._selector = None
        self._event_token = None
        self._analytics = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if selector is not None:
            self.selector = selector
        if event_token is not None:
            self.event_token = event_token
        if analytics is not None:
            self.analytics = analytics

    @property
    def type(self):
        """Gets the type of this Metric.


        :return: The type of this Metric.
        :rtype: MetricType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Metric.


        :param type: The type of this Metric.
        :type: MetricType
        """

        self._type = type

    @property
    def selector(self):
        """Gets the selector of this Metric.

        The selector

        :return: The selector of this Metric.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this Metric.

        The selector

        :param selector: The selector of this Metric.
        :type: str
        """

        self._selector = selector

    @property
    def event_token(self):
        """Gets the event_token of this Metric.

        The event token that should be sent with the notifications in case the click occurred.

        :return: The event_token of this Metric.
        :rtype: str
        """
        return self._event_token

    @event_token.setter
    def event_token(self, event_token):
        """Sets the event_token of this Metric.

        The event token that should be sent with the notifications in case the click occurred.

        :param event_token: The event_token of this Metric.
        :type: str
        """

        self._event_token = event_token

    @property
    def analytics(self):
        """Gets the analytics of this Metric.


        :return: The analytics of this Metric.
        :rtype: AnalyticsResponse
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this Metric.


        :param analytics: The analytics of this Metric.
        :type: AnalyticsResponse
        """

        self._analytics = analytics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
