# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PageLoadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'options': 'list[Option]',
        'metrics': 'list[Metric]',
        'analytics': 'AnalyticsResponse',
        'state': 'str',
        'trace': 'dict(str, object)'
    }

    attribute_map = {
        'options': 'options',
        'metrics': 'metrics',
        'analytics': 'analytics',
        'state': 'state',
        'trace': 'trace'
    }

    def __init__(self, options=None, metrics=None, analytics=None, state=None, trace=None):
        """PageLoadResponse - a model defined in OpenAPI"""

        self._options = None
        self._metrics = None
        self._analytics = None
        self._state = None
        self._trace = None
        self.discriminator = None

        if options is not None:
            self.options = options
        if metrics is not None:
            self.metrics = metrics
        if analytics is not None:
            self.analytics = analytics
        if state is not None:
            self.state = state
        if trace is not None:
            self.trace = trace

    @property
    def options(self):
        """Gets the options of this PageLoadResponse.

        List of options that should be applied. Note: options that have been set on selectors assigned to views will not be included here. 

        :return: The options of this PageLoadResponse.
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PageLoadResponse.

        List of options that should be applied. Note: options that have been set on selectors assigned to views will not be included here. 

        :param options: The options of this PageLoadResponse.
        :type: list[Option]
        """

        self._options = options

    @property
    def metrics(self):
        """Gets the metrics of this PageLoadResponse.

        Click track metrics. Note that click metrics for selectors set with views will not be included here. In case the same activity is serving content for selectors both assinged to a view and selectors without any views, and having click track metrics that are not assotiated with any view within the activity, then:   * in case of a prefetch only request, these metrics (tokens) will be set in the Prefetch response's metrics.   * in case of an execute only request, the metrics will be set in the page load response's metrics.   * in case of a request, with both, execute and prefetch, metrics will be set in the page load response's     metrics only. 

        :return: The metrics of this PageLoadResponse.
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PageLoadResponse.

        Click track metrics. Note that click metrics for selectors set with views will not be included here. In case the same activity is serving content for selectors both assinged to a view and selectors without any views, and having click track metrics that are not assotiated with any view within the activity, then:   * in case of a prefetch only request, these metrics (tokens) will be set in the Prefetch response's metrics.   * in case of an execute only request, the metrics will be set in the page load response's metrics.   * in case of a request, with both, execute and prefetch, metrics will be set in the page load response's     metrics only. 

        :param metrics: The metrics of this PageLoadResponse.
        :type: list[Metric]
        """

        self._metrics = metrics

    @property
    def analytics(self):
        """Gets the analytics of this PageLoadResponse.


        :return: The analytics of this PageLoadResponse.
        :rtype: AnalyticsResponse
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this PageLoadResponse.


        :param analytics: The analytics of this PageLoadResponse.
        :type: AnalyticsResponse
        """

        self._analytics = analytics

    @property
    def state(self):
        """Gets the state of this PageLoadResponse.

        View state token that must be sent back with display notification for the view. May only be present for prefetch requests. 

        :return: The state of this PageLoadResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PageLoadResponse.

        View state token that must be sent back with display notification for the view. May only be present for prefetch requests. 

        :param state: The state of this PageLoadResponse.
        :type: str
        """

        self._state = state

    @property
    def trace(self):
        """Gets the trace of this PageLoadResponse.

        The object containing all trace data for the request, only present if the trace token was provided in the request. 

        :return: The trace of this PageLoadResponse.
        :rtype: dict(str, object)
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this PageLoadResponse.

        The object containing all trace data for the request, only present if the trace token was provided in the request. 

        :param trace: The trace of this PageLoadResponse.
        :type: dict(str, object)
        """

        self._trace = trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageLoadResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
