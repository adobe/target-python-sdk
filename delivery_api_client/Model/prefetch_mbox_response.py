# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PrefetchMboxResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'int',
        'name': 'str',
        'options': 'list[Option]',
        'metrics': 'list[Metric]',
        'analytics': 'AnalyticsResponse',
        'trace': 'dict(str, object)',
        'state': 'str'
    }

    attribute_map = {
        'index': 'index',
        'name': 'name',
        'options': 'options',
        'metrics': 'metrics',
        'analytics': 'analytics',
        'trace': 'trace',
        'state': 'state'
    }

    def __init__(self, index=None, name=None, options=None, metrics=None, analytics=None, trace=None, state=None):  # noqa: E501
        """PrefetchMboxResponse - a model defined in OpenAPI"""  # noqa: E501

        self._index = None
        self._name = None
        self._options = None
        self._metrics = None
        self._analytics = None
        self._trace = None
        self._state = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if metrics is not None:
            self.metrics = metrics
        if analytics is not None:
            self.analytics = analytics
        if trace is not None:
            self.trace = trace
        if state is not None:
            self.state = state

    @property
    def index(self):
        """Gets the index of this PrefetchMboxResponse.  # noqa: E501

        Indicates that the response is for mbox with the same index, as was specified in the prefetch or execute request.   # noqa: E501

        :return: The index of this PrefetchMboxResponse.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PrefetchMboxResponse.

        Indicates that the response is for mbox with the same index, as was specified in the prefetch or execute request.   # noqa: E501

        :param index: The index of this PrefetchMboxResponse.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this PrefetchMboxResponse.  # noqa: E501

        The name of the mbox. Since the same mbox name can be specified multiple times in the request it should be used in conjunction with the index.   # noqa: E501

        :return: The name of this PrefetchMboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrefetchMboxResponse.

        The name of the mbox. Since the same mbox name can be specified multiple times in the request it should be used in conjunction with the index.   # noqa: E501

        :param name: The name of this PrefetchMboxResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this PrefetchMboxResponse.  # noqa: E501

        The option that was matched for the current mbox. Cannot be an offer with templates or a visual offer.   # noqa: E501

        :return: The options of this PrefetchMboxResponse.  # noqa: E501
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PrefetchMboxResponse.

        The option that was matched for the current mbox. Cannot be an offer with templates or a visual offer.   # noqa: E501

        :param options: The options of this PrefetchMboxResponse.  # noqa: E501
        :type: list[Option]
        """

        self._options = options

    @property
    def metrics(self):
        """Gets the metrics of this PrefetchMboxResponse.  # noqa: E501

        Click metrics.  # noqa: E501

        :return: The metrics of this PrefetchMboxResponse.  # noqa: E501
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PrefetchMboxResponse.

        Click metrics.  # noqa: E501

        :param metrics: The metrics of this PrefetchMboxResponse.  # noqa: E501
        :type: list[Metric]
        """

        self._metrics = metrics

    @property
    def analytics(self):
        """Gets the analytics of this PrefetchMboxResponse.  # noqa: E501


        :return: The analytics of this PrefetchMboxResponse.  # noqa: E501
        :rtype: AnalyticsResponse
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this PrefetchMboxResponse.


        :param analytics: The analytics of this PrefetchMboxResponse.  # noqa: E501
        :type: AnalyticsResponse
        """

        self._analytics = analytics

    @property
    def trace(self):
        """Gets the trace of this PrefetchMboxResponse.  # noqa: E501

        The object containing all trace data for the request, only present if the trace token was provided in the request.   # noqa: E501

        :return: The trace of this PrefetchMboxResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this PrefetchMboxResponse.

        The object containing all trace data for the request, only present if the trace token was provided in the request.   # noqa: E501

        :param trace: The trace of this PrefetchMboxResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._trace = trace

    @property
    def state(self):
        """Gets the state of this PrefetchMboxResponse.  # noqa: E501

        Mbox state token that must be sent back with display notification for the mbox.  # noqa: E501

        :return: The state of this PrefetchMboxResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrefetchMboxResponse.

        Mbox state token that must be sent back with display notification for the mbox.  # noqa: E501

        :param state: The state of this PrefetchMboxResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrefetchMboxResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
