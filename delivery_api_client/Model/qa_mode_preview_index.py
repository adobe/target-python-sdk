# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QAModePreviewIndex(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activity_index': 'int',
        'experience_index': 'int'
    }

    attribute_map = {
        'activity_index': 'activityIndex',
        'experience_index': 'experienceIndex'
    }

    def __init__(self, activity_index=None, experience_index=None):
        """QAModePreviewIndex - a model defined in OpenAPI"""

        self._activity_index = None
        self._experience_index = None
        self.discriminator = None

        if activity_index is not None:
            self.activity_index = activity_index
        if experience_index is not None:
            self.experience_index = experience_index

    @property
    def activity_index(self):
        """Gets the activity_index of this QAModePreviewIndex.

        Index references the activity in the activity list (from the encrypted token). Validation   * If the activity list index is out of boundaries of the activities list in the token or if it is null it will  be ignored.   * Activity list index starts with 1.   * Should be at least one activity index, and should reference an activity specified in the token. 

        :return: The activity_index of this QAModePreviewIndex.
        :rtype: int
        """
        return self._activity_index

    @activity_index.setter
    def activity_index(self, activity_index):
        """Sets the activity_index of this QAModePreviewIndex.

        Index references the activity in the activity list (from the encrypted token). Validation   * If the activity list index is out of boundaries of the activities list in the token or if it is null it will  be ignored.   * Activity list index starts with 1.   * Should be at least one activity index, and should reference an activity specified in the token. 

        :param activity_index: The activity_index of this QAModePreviewIndex.
        :type: int
        """
        if activity_index is not None and activity_index < 1:
            raise ValueError("Invalid value for `activity_index`, must be a value greater than or equal to `1`")

        self._activity_index = activity_index

    @property
    def experience_index(self):
        """Gets the experience_index of this QAModePreviewIndex.

        When specified, the experience with this index in the activity definition will be selected. Validation   * Can be null (unspecified)   * If index is not specified or out of bounds, the experience will be selected via activity experience selector strategy.   * Experience index starts with 1. 

        :return: The experience_index of this QAModePreviewIndex.
        :rtype: int
        """
        return self._experience_index

    @experience_index.setter
    def experience_index(self, experience_index):
        """Sets the experience_index of this QAModePreviewIndex.

        When specified, the experience with this index in the activity definition will be selected. Validation   * Can be null (unspecified)   * If index is not specified or out of bounds, the experience will be selected via activity experience selector strategy.   * Experience index starts with 1. 

        :param experience_index: The experience_index of this QAModePreviewIndex.
        :type: int
        """
        if experience_index is not None and experience_index < 1:
            raise ValueError("Invalid value for `experience_index`, must be a value greater than or equal to `1`")

        self._experience_index = experience_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAModePreviewIndex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
