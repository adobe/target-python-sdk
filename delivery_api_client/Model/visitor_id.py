# coding: utf-8

"""
    Adobe Target Delivery API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VisitorId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tnt_id': 'str',
        'third_party_id': 'str',
        'marketing_cloud_visitor_id': 'str',
        'customer_ids': 'list[CustomerId]'
    }

    attribute_map = {
        'tnt_id': 'tntId',
        'third_party_id': 'thirdPartyId',
        'marketing_cloud_visitor_id': 'marketingCloudVisitorId',
        'customer_ids': 'customerIds'
    }

    def __init__(self, tnt_id=None, third_party_id=None, marketing_cloud_visitor_id=None, customer_ids=None):  # noqa: E501
        """VisitorId - a model defined in OpenAPI"""  # noqa: E501

        self._tnt_id = None
        self._third_party_id = None
        self._marketing_cloud_visitor_id = None
        self._customer_ids = None
        self.discriminator = None

        if tnt_id is not None:
            self.tnt_id = tnt_id
        if third_party_id is not None:
            self.third_party_id = third_party_id
        if marketing_cloud_visitor_id is not None:
            self.marketing_cloud_visitor_id = marketing_cloud_visitor_id
        if customer_ids is not None:
            self.customer_ids = customer_ids

    @property
    def tnt_id(self):
        """Gets the tnt_id of this VisitorId.  # noqa: E501

        Tnt id - an unique identifier (UUID). If no visitor id is provided the TNT id will be generated by the TNT server. The TNT id retunred by the server may also contain the profile location hint, with the same format as for other endpoints (standard/ajax/json/..). Example 32440324234-2343423.23_41, in this example the 23_41 is the profile location hint. Tnt id retuned in the response (containting the profile location hint) should be used in the subsequent requests  Validation   * Should not contain a '.' (dot) unless the dot delimits the location hint.   # noqa: E501

        :return: The tnt_id of this VisitorId.  # noqa: E501
        :rtype: str
        """
        return self._tnt_id

    @tnt_id.setter
    def tnt_id(self, tnt_id):
        """Sets the tnt_id of this VisitorId.

        Tnt id - an unique identifier (UUID). If no visitor id is provided the TNT id will be generated by the TNT server. The TNT id retunred by the server may also contain the profile location hint, with the same format as for other endpoints (standard/ajax/json/..). Example 32440324234-2343423.23_41, in this example the 23_41 is the profile location hint. Tnt id retuned in the response (containting the profile location hint) should be used in the subsequent requests  Validation   * Should not contain a '.' (dot) unless the dot delimits the location hint.   # noqa: E501

        :param tnt_id: The tnt_id of this VisitorId.  # noqa: E501
        :type: str
        """
        if tnt_id is not None and len(tnt_id) > 128:
            raise ValueError("Invalid value for `tnt_id`, length must be less than or equal to `128`")  # noqa: E501

        self._tnt_id = tnt_id

    @property
    def third_party_id(self):
        """Gets the third_party_id of this VisitorId.  # noqa: E501

        Third party id   # noqa: E501

        :return: The third_party_id of this VisitorId.  # noqa: E501
        :rtype: str
        """
        return self._third_party_id

    @third_party_id.setter
    def third_party_id(self, third_party_id):
        """Sets the third_party_id of this VisitorId.

        Third party id   # noqa: E501

        :param third_party_id: The third_party_id of this VisitorId.  # noqa: E501
        :type: str
        """
        if third_party_id is not None and len(third_party_id) > 128:
            raise ValueError("Invalid value for `third_party_id`, length must be less than or equal to `128`")  # noqa: E501

        self._third_party_id = third_party_id

    @property
    def marketing_cloud_visitor_id(self):
        """Gets the marketing_cloud_visitor_id of this VisitorId.  # noqa: E501

        Marketing cloud visitor id   # noqa: E501

        :return: The marketing_cloud_visitor_id of this VisitorId.  # noqa: E501
        :rtype: str
        """
        return self._marketing_cloud_visitor_id

    @marketing_cloud_visitor_id.setter
    def marketing_cloud_visitor_id(self, marketing_cloud_visitor_id):
        """Sets the marketing_cloud_visitor_id of this VisitorId.

        Marketing cloud visitor id   # noqa: E501

        :param marketing_cloud_visitor_id: The marketing_cloud_visitor_id of this VisitorId.  # noqa: E501
        :type: str
        """
        if marketing_cloud_visitor_id is not None and len(marketing_cloud_visitor_id) > 128:
            raise ValueError("Invalid value for `marketing_cloud_visitor_id`, length must be less than or equal to `128`")  # noqa: E501

        self._marketing_cloud_visitor_id = marketing_cloud_visitor_id

    @property
    def customer_ids(self):
        """Gets the customer_ids of this VisitorId.  # noqa: E501

        Along with the marketing cloud visitor id, you can associate additional customer ids  Validation   * No null elements.   # noqa: E501

        :return: The customer_ids of this VisitorId.  # noqa: E501
        :rtype: list[CustomerId]
        """
        return self._customer_ids

    @customer_ids.setter
    def customer_ids(self, customer_ids):
        """Sets the customer_ids of this VisitorId.

        Along with the marketing cloud visitor id, you can associate additional customer ids  Validation   * No null elements.   # noqa: E501

        :param customer_ids: The customer_ids of this VisitorId.  # noqa: E501
        :type: list[CustomerId]
        """

        self._customer_ids = customer_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisitorId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
